<?xml version="1.0" encoding="UTF-8"?><testrun name="OmdbRunnerTest" project="PostmanOmdb" tests="27" started="27" failures="2" errors="0" ignored="26">
  <testsuite name="com.qa.PostmanOmdb.OmdbRunnerTest" time="24.099">
    <testsuite name="Feature: Testing OMDB API" time="24.099">
      <testsuite name="Scenario: Testing a status code" time="0.004" incomplete="true">
        <failure>java.lang.AssertionError: 1 expectation failed.
JSON path Title doesn't match.
Expected: Guardians of the Galaxy Two
  Actual: null
&#13;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)&#13;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)&#13;
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)&#13;
	at java.lang.reflect.Constructor.newInstance(Unknown Source)&#13;
	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)&#13;
	at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)&#13;
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)&#13;
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)&#13;
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:483)&#13;
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)&#13;
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)&#13;
	at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:655)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)&#13;
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)&#13;
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)&#13;
	at io.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:275)&#13;
	at io.restassured.specification.ResponseSpecification$content$0.callCurrent(Unknown Source)&#13;
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:190)&#13;
	at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:258)&#13;
	at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:274)&#13;
	at com.qa.PostmanOmdb.OmdbTestSteps.a_film_exists_with_the_Title_Guardians_of_the_Galaxy_Two(OmdbTestSteps.java:62)&#13;
	at ✽.Given a film exists with the Title Guardians of the Galaxy Two(src/test/intro.feature:4)&#13;
&#13;
</failure>
        <testcase name="Given a film exists with the Title Guardians of the Galaxy Two" classname="Scenario: Testing a status code" time="0.003">
          <failure>java.lang.AssertionError: 1 expectation failed.
JSON path Title doesn't match.
Expected: Guardians of the Galaxy Two
  Actual: null
&#13;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)&#13;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)&#13;
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)&#13;
	at java.lang.reflect.Constructor.newInstance(Unknown Source)&#13;
	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)&#13;
	at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)&#13;
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)&#13;
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)&#13;
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:483)&#13;
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)&#13;
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)&#13;
	at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:655)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)&#13;
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)&#13;
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)&#13;
	at io.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:275)&#13;
	at io.restassured.specification.ResponseSpecification$content$0.callCurrent(Unknown Source)&#13;
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:190)&#13;
	at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:258)&#13;
	at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:274)&#13;
	at com.qa.PostmanOmdb.OmdbTestSteps.a_film_exists_with_the_Title_Guardians_of_the_Galaxy_Two(OmdbTestSteps.java:62)&#13;
	at ✽.Given a film exists with the Title Guardians of the Galaxy Two(src/test/intro.feature:4)&#13;
&#13;
</failure>
        </testcase>
        <testcase name="When a user retrieves the film by the title Guardians of the Galaxy Two" classname="Scenario: Testing a status code" time="0.001" ignored="true"/>
        <testcase name="Then the status code reads 200" classname="Scenario: Testing a status code" time="0.88" ignored="true"/>
      </testsuite>
      <testsuite name="Scenario: Testing both a status code and a field" time="0.711" incomplete="true">
        <skipped/>
        <testcase name="Given a film exists with the Title IT" classname="Scenario: Testing both a status code and a field" time="0.0" ignored="true"/>
        <testcase name="When a user retrieves the film by the title IT" classname="Scenario: Testing both a status code and a field" time="0.001" ignored="true"/>
        <testcase name="Then the status code reads 200" classname="Scenario: Testing both a status code and a field" time="0.0" ignored="true"/>
        <testcase name="And the Rated Field is equal to R" classname="Scenario: Testing both a status code and a field" time="0.71" ignored="true"/>
      </testsuite>
      <testsuite name="Scenario: Testing the API using parameters" time="0.678" incomplete="true">
        <skipped/>
        <testcase name="Given a film exists with the Title &quot;Hop&quot;" classname="Scenario: Testing the API using parameters" time="0.0" ignored="true"/>
        <testcase name="When a user retrieves the film by the title &quot;Hop&quot;" classname="Scenario: Testing the API using parameters" time="0.001" ignored="true"/>
        <testcase name="Then the status code reads 200" classname="Scenario: Testing the API using parameters" time="0.0" ignored="true"/>
        <testcase name="And the Rated Field is equal to &quot;PG&quot;" classname="Scenario: Testing the API using parameters" time="0.677" ignored="true"/>
      </testsuite>
      <testsuite name="Scenario Outline: Testing the API using a table" time="12.325">
        <testsuite name="Examples:" time="12.325">
          <testsuite name="| Hop | PG |" time="0.697" incomplete="true">
            <skipped/>
            <testcase name="Given a film exists with the Title &quot;Hop&quot;" classname="| Hop | PG |" time="0.0" ignored="true"/>
            <testcase name="When a user retrieves the film by the title &quot;Hop&quot;" classname="| Hop | PG |" time="0.001" ignored="true"/>
            <testcase name="Then the status code reads 200" classname="| Hop | PG |" time="0.0" ignored="true"/>
            <testcase name="And the Rated Field is equal to &quot;PG&quot;" classname="| Hop | PG |" time="0.696" ignored="true"/>
          </testsuite>
          <testsuite name="| IT | R |" time="0.699" incomplete="true">
            <skipped/>
            <testcase name="Given a film exists with the Title &quot;IT&quot;" classname="| IT | R |" time="0.0" ignored="true"/>
            <testcase name="When a user retrieves the film by the title &quot;IT&quot;" classname="| IT | R |" time="0.0" ignored="true"/>
            <testcase name="Then the status code reads 200" classname="| IT | R |" time="0.001" ignored="true"/>
            <testcase name="And the Rated Field is equal to &quot;R&quot;" classname="| IT | R |" time="0.698" ignored="true"/>
          </testsuite>
          <testsuite name="| Up | PG |" time="0.695" incomplete="true">
            <skipped/>
            <testcase name="Given a film exists with the Title &quot;Up&quot;" classname="| Up | PG |" time="0.0" ignored="true"/>
            <testcase name="When a user retrieves the film by the title &quot;Up&quot;" classname="| Up | PG |" time="0.0" ignored="true"/>
            <testcase name="Then the status code reads 200" classname="| Up | PG |" time="0.0" ignored="true"/>
            <testcase name="And the Rated Field is equal to &quot;PG&quot;" classname="| Up | PG |" time="0.695" ignored="true"/>
          </testsuite>
          <testsuite name="| Saw | R |" time="0.692" incomplete="true">
            <skipped/>
            <testcase name="Given a film exists with the Title &quot;Saw&quot;" classname="| Saw | R |" time="0.0" ignored="true"/>
            <testcase name="When a user retrieves the film by the title &quot;Saw&quot;" classname="| Saw | R |" time="0.001" ignored="true"/>
            <testcase name="Then the status code reads 200" classname="| Saw | R |" time="0.0" ignored="true"/>
            <testcase name="And the Rated Field is equal to &quot;R&quot;" classname="| Saw | R |" time="0.691" ignored="true"/>
          </testsuite>
        </testsuite>
      </testsuite>
    </testsuite>
  </testsuite>
</testrun>
